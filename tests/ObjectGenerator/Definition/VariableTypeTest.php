<?php

namespace Morebec\Devtools\ObjectGenerator\Definition;

use Morebec\Devtools\ObjectGenerator\Domain\Definition\VariableType;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2019-12-06 at 14:30:57.
 */
class VariableTypeTest extends TestCase
{
    public function testIsTypeNullable()
    {
       $t = VariableType::fromString(''); // potentially nullable since this would return mixed
       $this->assertTrue($t->isNullable());
       
        $t = VariableType::fromString('string'); 
        $this->assertFalse($t->isNullable());
        
        $t = VariableType::fromString('string|null');
        $this->assertTrue($t->isNullable());
        
        $t = VariableType::fromString('string[]|null');
        $this->assertTrue($t->isNullable());
        
        $t = VariableType::fromString('string[]');
        $this->assertFalse($t->isNullable());
    }

    public function testIsMixed()
    {
        $t = VariableType::fromString('');
        $this->assertTrue($t->isMixed());

        $t = VariableType::fromString('string');
        $this->assertFalse($t->isMixed());

        $t = VariableType::fromString('string|null');
        $this->assertFalse($t->isMixed());

        $t = VariableType::fromString('string[]|null');
        $this->assertFalse($t->isMixed());

        $t = VariableType::fromString('string[]');
        $this->assertFalse($t->isMixed());
        
        $t = VariableType::fromString('string[]|int');
        $this->assertTrue($t->isMixed());
        
        $t = VariableType::fromString('string[]|int|null');
        $this->assertTrue($t->isMixed());
    }

    public function testGetDocBlockType()
    {
        $t = VariableType::fromString(VariableType::UNDEFINED);
        $this->assertEquals('', $t->getDocBlockType());

        $t = VariableType::fromString('string');
        $this->assertEquals('string', $t->getDocBlockType());

        $t = VariableType::fromString('string|null');
        $this->assertEquals('string|null', $t->getDocBlockType());

        $t = VariableType::fromString('string[]|null');
        $this->assertEquals('string[]|null', $t->getDocBlockType());

        $t = VariableType::fromString('string[]');
        $this->assertEquals('string[]', $t->getDocBlockType());

        $t = VariableType::fromString('string[]|int');
        $this->assertEquals('string[]|int', $t->getDocBlockType());

        $t = VariableType::fromString('string[]|int|null');
        $this->assertEquals('string[]|int|null', $t->getDocBlockType());
    }

    public function testGetBaseType()
    {
        $t = VariableType::fromString('');
        $this->assertEquals(VariableType::VOID, $t->getBaseType());
        
        $t = VariableType::fromString(VariableType::UNDEFINED);
        $this->assertEquals(VariableType::VOID, $t->getBaseType());
        
        $t = VariableType::fromString(VariableType::VOID);
        $this->assertEquals(VariableType::VOID, $t->getBaseType());

        $t = VariableType::fromString('string');
        $this->assertEquals(VariableType::STRING, $t->getBaseType());

        $t = VariableType::fromString('string|null');
        $this->assertEquals(VariableType::STRING, $t->getBaseType());

        $t = VariableType::fromString('string[]|null');
        $this->assertEquals(VariableType::ARRAY, $t->getBaseType());

        $t = VariableType::fromString('string[]');
        $this->assertEquals(VariableType::ARRAY, $t->getBaseType());

        $t = VariableType::fromString('string[]|int');
        $this->assertEquals(VariableType::MIXED, $t->getBaseType());

        $t = VariableType::fromString('string[]|int|null');
        $this->assertEquals(VariableType::MIXED, $t->getBaseType());
    }
}
